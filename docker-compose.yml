services:
  # Dockerización para la base de datos MySQL (por si se cae la de la catédra).
  db:
    image: mysql:8.0.42
    container_name: bd2_database
    environment:
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    ports:
      - "3305:3306" # puerto_host:puerto 3306 del contenedor (puerto estándar de MySQL)

    # Volume para persistir los datos de la base de datos.
    # "db_data" es un volumen manejado por Docker que es oculto.
    # En "/var/lib/mysql" dentro del contenedor, MySQL por defecto escribe archivos.
    # Los scripts MySQL dentro del directorio local "./scripts" se ejecutarán en orden alfabético en la base de datos la primera vez que se levante.
    volumes:
      - db_data:/var/lib/mysql
      - ./scripts:/docker-entrypoint-initdb.d
      - ./data/datos_bd_uruguay:/var/lib/mysql-files/

  # Dockerización para la app de frontend.
  frontend-app:
    build:
      context: ./frontend-app
      dockerfile: ./Dockerfile
    container_name: bd2_frontend-app
    ports:
      - "5173:5173" # puerto_host:puerto_container
    depends_on:
      - backend-app
    volumes:
      - ./frontend-app:/frontend-app

  # Dockerización para la app de backend.
  backend-app:
    build:
      context: ./backend-app
      dockerfile: ./Dockerfile
    container_name: bd2_backend-app
    ports:
      - "5000:5000" # puerto_host:puerto_container
    depends_on:
      - db
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
    volumes:
      - ./backend-app:/backend-app

volumes:
  db_data: